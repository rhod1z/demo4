# Deploy docker image to Azure App Service template.

steps:

# If branch is 'prd', swap 'prd' out to 'stg' for easy rollback.
- task: AzureAppServiceManage@0
  condition: eq(variables['Build.SourceBranchName'], 'prd')
  displayName: 'Backup prd to stg slot'
  inputs:
    azureSubscription: $(azSubscription)
    Action:            'Swap Slots'
    WebAppName:        $(varsMyWEBAPPNAME)
    ResourceGroupName: $(varsMyRESOURCEGROUPNAME)
    SourceSlot:        'stg'

# If branch is anything, except 'stg', deploy the web app.
- task: AzureRmWebAppDeployment@4
  condition: ne(variables['Build.SourceBranchName'], 'stg')
  displayName: 'Deploy to Azure (${{ parameters.env }})'
  inputs:
    ConnectionType:    'AzureRM'
    azureSubscription: $(azSubscription)
    appType:           'webAppContainer'
    WebAppName:        $(varsMyWEBAPPNAME)
    DockerNamespace:   '$(acrName).azurecr.io'
    DockerRepository:  $(acrRepo_Web)
    DockerImageTag:    $(tag)-$(targetEnv)

# If branch is 'stg', deploy the web app to the staging slot.
- task: AzureRmWebAppDeployment@4
  condition: eq(variables['Build.SourceBranchName'], 'stg')
  displayName: 'Deploy to Azure (${{ parameters.env }})'
  inputs:
    ConnectionType:    'AzureRM'
    azureSubscription: $(azSubscription)
    appType:           'webAppContainer'
    WebAppName:        $(varsMyWEBAPPNAME)
    deployToSlotOrASE: true
    ResourceGroupName: $(varsMyRESOURCEGROUPNAME)
    SlotName:          'stg'
    DockerNamespace:   '$(acrName).azurecr.io'
    DockerRepository:  '$(acrRepo_Web)'
    DockerImageTag:    '$(tag)-$(targetEnv)'
